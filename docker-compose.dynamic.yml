version: '3.8'

services:
  # Core Infrastructure
  redis-master:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    command: redis-server --requirepass pass123 --maxmemory 2gb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    networks:
      - trading_network
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "pass123", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5

  redis-slave:
    image: redis:7-alpine
    ports:
      - "6380:6379"
    command: redis-server --replicaof redis-master 6379 --masterauth pass123 --requirepass pass123
    depends_on:
      redis-master:
        condition: service_healthy
    networks:
      - trading_network

  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: qt_trade
      POSTGRES_PASSWORD: pass123
      POSTGRES_INITDB_ARGS: "--data-checksums"
    ports:
      - "5432:5432"
    volumes:
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
      - postgres_data:/var/lib/postgresql/data
    networks:
      - trading_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # üöÄ Real-Time Trading Engine
  realtime-engine:
    build:
      context: .
      dockerfile: Dockerfile
    environment:
      - REDIS_URL=redis://:pass123@redis-master:6379/0
      - ALPACA_API_KEY=${ALPACA_API_KEY}
      - ALPACA_SECRET_KEY=${ALPACA_SECRET_KEY}
      - FINNHUB_API_KEY=${FINNHUB_API_KEY}
    command: python realtime_trading_engine.py
    depends_on:
      redis-master:
        condition: service_healthy
    volumes:
      - ./backend:/app
    networks:
      - trading_network
    restart: unless-stopped

  # ü§ñ AI Prediction Pipeline
  ai-pipeline:
    build:
      context: .
      dockerfile: Dockerfile
    environment:
      - REDIS_URL=redis://:pass123@redis-master:6379/0
      - GROK_API_KEY=${GROK_API_KEY}
      - MODEL_CACHE=/app/models
    command: python ai_prediction_pipeline.py
    depends_on:
      redis-master:
        condition: service_healthy
    volumes:
      - ./backend:/app
      - model_cache:/app/models
    networks:
      - trading_network
    restart: unless-stopped

  # ‚ö° Event-Driven System
  event-system:
    build:
      context: .
      dockerfile: Dockerfile
    environment:
      - REDIS_URL=redis://:pass123@redis-master:6379/0
    command: python event_driven_system.py
    depends_on:
      redis-master:
        condition: service_healthy
    volumes:
      - ./backend:/app
    networks:
      - trading_network
    restart: unless-stopped

  # üìä Real-Time Analytics
  analytics-engine:
    build:
      context: .
      dockerfile: Dockerfile
    environment:
      - REDIS_URL=redis://:pass123@redis-master:6379/0
    command: python realtime_analytics.py
    depends_on:
      redis-master:
        condition: service_healthy
    volumes:
      - ./backend:/app
    networks:
      - trading_network
    restart: unless-stopped

  # üåê Dashboard API
  dashboard-api:
    build:
      context: .
      dockerfile: Dockerfile
    environment:
      - REDIS_URL=redis://:pass123@redis-master:6379/0
      - JWT_SECRET_KEY=${JWT_SECRET_KEY:-your-secret-key}
    command: python dashboard_api.py
    ports:
      - "8000:8000"
    depends_on:
      redis-master:
        condition: service_healthy
    volumes:
      - ./backend:/app
    networks:
      - trading_network
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.api.rule=Host(`api.qbot.local`)"
      - "traefik.http.services.api.loadbalancer.server.port=8000"

  # Original Worker (Enhanced)
  worker:
    build: .
    depends_on:
      redis-master:
        condition: service_healthy
      postgres:
        condition: service_healthy
    env_file:
      - .env
    environment:
      - REDIS_URL=redis://:pass123@redis-master:6379/0
      - DATABASE_URL=postgresql://postgres:pass123@postgres:5432/qt_trade
    volumes:
      - ./backend:/app
    networks:
      - trading_network
    restart: unless-stopped

  # Celery Beat Scheduler
  celery-beat:
    build: .
    depends_on:
      redis-master:
        condition: service_healthy
    env_file:
      - .env
    environment:
      - REDIS_URL=redis://:pass123@redis-master:6379/0
      - DATABASE_URL=postgresql://postgres:pass123@postgres:5432/qt_trade
    command: ["celery", "-A", "worker", "beat", "--loglevel=info"]
    volumes:
      - ./backend:/app
    networks:
      - trading_network
    restart: unless-stopped

  # Enhanced YFinance Service
  yfinance-enhanced:
    build: .
    depends_on:
      redis-master:
        condition: service_healthy
    env_file:
      - .env
    environment:
      - REDIS_URL=redis://:pass123@redis-master:6379/0
      - YF_ENHANCED_INTERVAL=300
      - YF_HISTORY_DAYS=365
    command: ["python", "yfinance_enhanced_service.py"]
    volumes:
      - ./backend:/app
    networks:
      - trading_network
    restart: unless-stopped

  # Multi-API Enhanced Service
  multi-api:
    build: .
    depends_on:
      redis-master:
        condition: service_healthy
    env_file:
      - .env
    environment:
      - REDIS_URL=redis://:pass123@redis-master:6379/0
      - MULTI_API_INTERVAL=300
    command: ["python", "multi_api_enhanced_service.py"]
    volumes:
      - ./backend:/app
    networks:
      - trading_network
    restart: unless-stopped

  # Missing Endpoints Updater
  endpoint-updater:
    build: .
    depends_on:
      redis-master:
        condition: service_healthy
    environment:
      - REDIS_URL=redis://:pass123@redis-master:6379/0
    command: ["sh", "-c", "while true; do python update_missing_endpoints.py; sleep 300; done"]
    volumes:
      - ./backend:/app
    networks:
      - trading_network
    restart: unless-stopped

  # Nginx for WebSocket Proxy
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - dashboard-api
      - realtime-engine
    networks:
      - trading_network
    restart: unless-stopped

  # Redis Commander for monitoring
  redis-commander:
    image: rediscommander/redis-commander:latest
    environment:
      - REDIS_HOSTS=master:redis-master:6379:0:pass123,slave:redis-slave:6379:0:pass123
    ports:
      - "8081:8081"
    networks:
      - trading_network
    profiles:
      - monitoring

  # Prometheus for metrics
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - trading_network
    profiles:
      - monitoring

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - trading_network
    profiles:
      - monitoring

networks:
  trading_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  redis_data:
  postgres_data:
  model_cache:
  prometheus_data:
  grafana_data: